from langchain_core.messages import HumanMessage
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.output_parsers import StrOutputParser
from dotenv import load_dotenv
import os
import subprocess
import traceback
from typing import Tuple

def init_llm():
    load_dotenv()
    chave_api = os.getenv("API_KEY")

    return ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", api_key=chave_api)

llm = init_llm()

def gerar_questao(conteudo):
    message = HumanMessage(content=f"Crie uma quest√£o de programa√ß√£o em Python para um iniciante, com o conte√∫do de {conteudo}. fa√ßa uma quest√£o simples para n√£o gerar muita dificuldade")
    resposta = llm.invoke([message])
    parser = StrOutputParser()
    questao_completa = parser.invoke(resposta)

    return {
        "questao": questao_completa
    }

def corrigir_codigo(questao: str, codigo: str) -> Tuple[bool, str]:
    """
    Corrige e avalia um c√≥digo Python submetido, retornando se est√° correto e um feedback detalhado.

    Args:
    - questao: A descri√ß√£o da tarefa/quest√£o que o c√≥digo deve resolver.
    - codigo: O c√≥digo Python submetido pelo usu√°rio.

    Returns:
    - Tuple[bool, str]: Um par contendo se o c√≥digo est√° correto e o feedback.
    """

 
    message = HumanMessage(content=f"Voc√™ recebeu a seguinte quest√£o: {questao}\n\nVerifique se o seguinte c√≥digo resolve corretamente a quest√£o. Avalie o c√≥digo e forne√ßa feedback sobre sua corre√ß√£o e melhorias:\n{codigo}")
    resposta_llm = llm.invoke([message])
    parser = StrOutputParser()
    feedback_llm = parser.invoke(resposta_llm)

    try:
        with open("temp_code.py", "w") as f:
            f.write(codigo)

        result = subprocess.run(
            ["python", "temp_code.py"],
            capture_output=True,
            text=True,
            timeout=5 
        )
      
        if result.returncode == 0:
            if "incorreto" in feedback_llm.lower() or "n√£o est√° correto" in feedback_llm.lower():
                esta_correto = False
            else:
                esta_correto = True
            return esta_correto, f"O c√≥digo foi executado com sucesso. Aqui est√£o algumas sugest√µes:\n\n{feedback_llm}"

        else:
            return False, f"Erro ao executar o c√≥digo. Sa√≠da do erro:\n{result.stderr}\n\nSugest√£o do LLM sobre o c√≥digo:\n{feedback_llm}"

    except subprocess.TimeoutExpired:
        return False, "O c√≥digo excedeu o limite de tempo de execu√ß√£o. Tente otimiz√°-lo para evitar loops infinitos ou longas execu√ß√µes."

    except Exception as e:
        error_details = traceback.format_exc()
        return False, f"Ocorreu um erro inesperado ao avaliar o c√≥digo:\n{error_details}\n\nSugest√£o do LLM sobre o c√≥digo:\n{feedback_llm}"


def dar_feedback(codigo):
    message = HumanMessage(content=f"Analise este c√≥digo em Python e sugira melhorias:\n{codigo}")
    resposta = llm.invoke([message])
    parser = StrOutputParser()

    return parser.invoke(resposta)

def classificar_nivel_estudante(resposta1, resposta2, resposta3):
    message = HumanMessage(
        content=(
            f"Classifique o n√≠vel de programa√ß√£o do estudante como iniciante, intermedi√°rio ou avan√ßado "
            f"baseado nas seguintes informa√ß√µes:\n"
            f"- N√≠vel de conhecimento: '{resposta1}'\n"
            f"- Linguagem de programa√ß√£o com a qual j√° teve contato: '{resposta2}'\n"
            f"- Objetivo ao aprender programa√ß√£o: '{resposta3}'\n"
            f"Responda apenas com o n√≠vel e uma breve justificativa."
            f"Responda como se tivesse falando com esse estudante"
        )
    )
    resposta = llm.invoke([message])
    parser = StrOutputParser()

    return parser.invoke(resposta)

def gerar_questionario_questao(conteudo):
    message_content = (
        f"Crie uma quest√£o objetiva de m√∫ltipla escolha sobre o conte√∫do '{conteudo}', adequada para iniciantes. "
        f"A quest√£o deve ter exatamente quatro alternativas, com apenas uma das alternativas corretas."
        f"Inclua tamb√©m o racioc√≠nio necess√°rio para identificar a resposta correta."
    )

    message = HumanMessage(content=message_content)
    resposta = llm.invoke([message])
    parser = StrOutputParser()
    questao_completa = parser.invoke(resposta)

    return {
        "questao": questao_completa
    }

def verificar_resposta_questionario(enunciado, alternativas, resposta):
    alternativas_str = "\n".join(alternativas)

    message_content = f"""
    Verifique se a resposta √† quest√£o abaixo est√° correta.

    Enunciado da Quest√£o: {enunciado}
    Alternativas:
    {alternativas_str}

    Resposta do usu√°rio: {resposta}

    Por favor, responda se a resposta est√° correta ou incorreta.
    Se estiver incorreta, explique detalhadamente o porqu√™, mas sem revelar a resposta correta.

    Formato de resposta esperado:
    - Correto: [sim/n√£o]
    - Explica√ß√£o: [forne√ßa uma explica√ß√£o detalhada]
    """

    message = HumanMessage(content=message_content)
    resposta_da_ia = llm.invoke([message])
    parser = StrOutputParser()
    resposta_str = parser.invoke(resposta_da_ia)

    lines = resposta_str.split('\n')
    correto = False
    mensagem = ""

    for line in lines:
        if "Correto:" in line:
            if "sim" in line.lower():
                correto = True
        elif "Explica√ß√£o:" in line:
            mensagem = line.replace("Explica√ß√£o:", "").strip()

    return {
        "correto": correto,
        "mensagem": mensagem
    }

def realizar_questionario(conteudo, resposta_usuario):
    questao = gerar_questionario_questao(conteudo, dificuldade="normal")
    resultado = verificar_resposta_questionario(questao, resposta_usuario)

    if resultado["correto"]:
        print("Parab√©ns! Resposta correta! üéâ")
        print(f"Explica√ß√£o: {resultado['mensagem']}")
    else:
        print("Resposta incorreta. Vamos tentar com uma quest√£o mais f√°cil.")
        print(f"Explica√ß√£o: {resultado['mensagem']}")

        parser = StrOutputParser()
        resposta_str = parser.invoke(questao)
        print("\nAqui est√° uma nova quest√£o para voc√™ praticar:\n")
        print(resposta_str)

